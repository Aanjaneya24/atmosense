{"version":3,"sources":["images/WeatherIcons.gif","forcast.js","WeatherMap.js","currentLocation.js","utils/getBackgroundForWeather.js","App.js","serviceWorker.js","index.js","apiKeys.js"],"names":["module","exports","Forecast","useState","query","setQuery","error","setError","weather","setWeather","icon","setIcon","search","cityName","axios","get","apiKeys","base","key","then","response","data","updatedIcon","main","catch","message","useEffect","defaults","className","color","size","animate","type","placeholder","onChange","e","target","value","onKeyPress","src","onClick","alt","style","cursor","name","sys","country","width","height","Math","round","temp","humidity","visibility","wind","speed","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","WeatherMap","lat","lon","city","marginTop","Map","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","Popup","Weather","state","undefined","temperatureC","temperatureF","description","clothingTip","weeklyForecast","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","currentRes","json","forecastRes","forecastData","dailyMap","list","forEach","item","date","dt_txt","split","push","dailyAverages","Object","entries","slice","map","temps","avgTemp","reduce","b","length","condition","tip","includes","setState","console","handleBackgroundClick","classList","contains","log","renderForecastCard","day","index","Date","toLocaleDateString","weekday","this","coords","latitude","longitude","err","alert","timerID","setInterval","clearInterval","d","code","backgroundStyle","backgroundImage","Clear","Clouds","Rain","Thunderstorm","Snow","Drizzle","Mist","Haze","Fog","Smoke","Dust","Sand","Ash","Squall","Tornado","backgroundSize","backgroundRepeat","backgroundPosition","transition","Fragment","IN","US","GB","AU","CA","FR","DE","JP","CN","BR","margin","marginBottom","format","interval","ticking","getDay","getDate","getMonth","getFullYear","loader","WebkitUserDrag","fontSize","fontWeight","React","Component","App","bgIndex","setBgIndex","randomIndex","floor","random","prevIndex","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f9dc675.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forecast() {\n  const [query, setQuery] = useState(\"Delhi\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [icon, setIcon] = useState(\"CLEAR_DAY\");\n\n  const search = (cityName = query) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${cityName}&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        const data = response.data;\n        setWeather(data);\n        setQuery(\"\");\n\n        const condition = data.weather[0].main;\n        let updatedIcon = \"CLEAR_DAY\";\n\n        switch (condition) {\n          case \"Clouds\":\n            updatedIcon = \"CLOUDY\";\n            break;\n          case \"Rain\":\n            updatedIcon = \"RAIN\";\n            break;\n          case \"Snow\":\n            updatedIcon = \"SNOW\";\n            break;\n          case \"Haze\":\n            updatedIcon = \"CLEAR_DAY\";\n            break;\n          case \"Drizzle\":\n            updatedIcon = \"SLEET\";\n            break;\n          case \"Fog\":\n          case \"Smoke\":\n            updatedIcon = \"FOG\";\n            break;\n          case \"Dust\":\n          case \"Tornado\":\n            updatedIcon = \"WIND\";\n            break;\n          default:\n            updatedIcon = \"CLEAR_DAY\";\n        }\n\n        setIcon(updatedIcon);\n        setError(\"\");\n      })\n      .catch(() => {\n        setError({ message: \"Not Found\", query: query });\n        setWeather({});\n      });\n  };\n\n  useEffect(() => {\n    search(\"Delhi\");\n  }, []);\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n\n      <div className=\"today-weather\">\n        <h3>{weather.weather ? weather.weather[0].main : \"Weather Info\"}</h3>\n\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={(e) => e.key === \"Enter\" && search()}\n          />\n          <div className=\"img-box\">\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={() => search()}\n              alt=\"search\"\n              style={{ cursor: \"pointer\" }}\n            />\n          </div>\n        </div>\n\n        <ul>\n          {typeof weather.main !== \"undefined\" ? (\n            <>\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n                  alt=\"weather icon\"\n                  style={{ width: \"40px\", height: \"40px\" }}\n                />\n              </li>\n              <li>\n                Temperature\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}°C \n                </span>\n              </li>\n              <li>\n                Humidity\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility\n                <span className=\"temp\">\n                  {Math.round(weather.visibility / 1000)} km\n                </span>\n              </li>\n              <li>\n                Wind Speed\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} km/h\n                </span>\n              </li>\n            </>\n          ) : (\n            <li className=\"cityHead\" style={{ color: \"crimson\" }}>\n              {error.query} - {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Forecast;\n","// WeatherMap.js\nimport React from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\n// Fix default marker icon\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\nconst WeatherMap = ({ lat, lon, city }) => {\n  return (\n    <div className=\"weather-map-container\" style={{ height: '200px', width: '100%', marginTop: '20px' }}>\n      <Map center={[lat, lon]}\n                      zoom={10}\n                    scrollWheelZoom={false}\n                    className=\"leaflet-container\"\n                        >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={[lat, lon]}>\n          <Popup>📍 {city || 'Your Location'}</Popup>\n        </Marker>\n      </Map>\n    </div>\n  );\n};\n\nexport default WeatherMap;\n","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport { getBackgroundImage } from \"./utils/getBackgroundForWeather\";\nimport WeatherMap from \"./WeatherMap\";\n\nconst dateBuilder = (d) => {\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n  const days = [\n    \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n    \"Thursday\", \"Friday\", \"Saturday\"\n  ];\n\n  return `${days[d.getDay()]}, ${d.getDate()} ${months[d.getMonth()]} ${d.getFullYear()}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\nconst getCountryName = (code) => {\n  const countries = {\n    IN: \"India\",\n    US: \"United States\",\n    GB: \"United Kingdom\",\n    AU: \"Australia\",\n    CA: \"Canada\",\n    FR: \"France\",\n    DE: \"Germany\",\n    JP: \"Japan\",\n    CN: \"China\",\n    BR: \"Brazil\",\n  };\n  return countries[code] || code;\n};\n\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    main: undefined,\n    clothingTip: \"\",\n    weeklyForecast: []\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          alert(\"Location access denied. Showing weather for Delhi.\");\n          this.getWeather(28.67, 77.22);\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(() => {\n      if (this.state.lat && this.state.lon) {\n        this.getWeather(this.state.lat, this.state.lon);\n      }\n    }, 600000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  getPosition = (options) => {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  getWeather = async (lat, lon) => {\n    try {\n      const currentRes = await fetch(\n        `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n      );\n      const data = await currentRes.json();\n\n      const forecastRes = await fetch(\n        `${apiKeys.base}forecast?lat=${lat}&lon=${lon}&units=metric&appid=${apiKeys.key}`\n      );\n      const forecastData = await forecastRes.json();\n\n      const dailyMap = {};\n      forecastData.list.forEach(item => {\n        const date = item.dt_txt.split(\" \")[0];\n        if (!dailyMap[date]) {\n          dailyMap[date] = [];\n        }\n        dailyMap[date].push(item.main.temp);\n      });\n\n      const dailyAverages = Object.entries(dailyMap).slice(1, 8).map(([date, temps]) => {\n        const avgTemp = temps.reduce((a, b) => a + b, 0) / temps.length;\n        return {\n          date,\n          avgTemp\n        };\n      });\n\n      const temp = data.main.temp;\n      let icon = \"CLEAR_DAY\";\n      const condition = data.weather[0].main;\n      switch (condition) {\n        case \"Haze\": icon = \"CLEAR_DAY\"; break;\n        case \"Clouds\": icon = \"CLOUDY\"; break;\n        case \"Rain\": icon = \"RAIN\"; break;\n        case \"Snow\": icon = \"SNOW\"; break;\n        case \"Dust\":\n        case \"Tornado\": icon = \"WIND\"; break;\n        case \"Drizzle\": icon = \"SLEET\"; break;\n        case \"Fog\":\n        case \"Smoke\": icon = \"FOG\"; break;\n        default: icon = \"CLEAR_DAY\";\n      }\n\n      let tip = \"\";\n      if (temp >= 35) {\n        tip = condition === \"Clear\"\n          ? \"🔥 Scorching sun! Wear sleeveless shirts, use sunscreen & drink lots of water 💧🕶️\"\n          : condition === \"Clouds\"\n            ? \"🌤️ It's hot and cloudy — wear light cottons and stay hydrated 👕☁️\"\n            : \"🥵 Hot! Light breathable clothes and protection from heat recommended 👕🧢\";\n      } else if (temp >= 30) {\n        tip = condition === \"Clouds\"\n          ? \"🌦️ Hot but cloudy — carry an umbrella and wear sandals or waterproof shoes ☔👟\"\n          : \"😎 Sunny day! Cotton clothes and shades are ideal 👕🧢\";\n      } else if (temp >= 22) {\n        tip = condition === \"Clouds\"\n          ? \"⛅ Comfortable and cloudy — a t-shirt with jeans or joggers is perfect 👕👖\"\n          : \"🌤️ Pleasant day — t-shirt or polo with jeans will work well 👕👖\";\n      } else if (temp >= 15) {\n        tip = condition === \"Rain\"\n          ? \"🌧️ Chilly and rainy — wear a light jacket and carry an umbrella 🧥☔\"\n          : \"🍃 Slightly cool — hoodie or light jacket should do 🧥🧢\";\n      } else if (temp >= 8) {\n        tip = [\"Fog\", \"Haze\"].includes(condition)\n          ? \"🌫️ Foggy cold — wear a warm sweater and cover your neck 🧣🧥\"\n          : \"🥶 Cold! Time for sweaters and scarves 🧣🧥\";\n      } else if (temp >= 0) {\n        tip = condition === \"Snow\"\n          ? \"❄️ Snowy weather! Wear insulated jackets, gloves, and boots 🧤🧣🧥\"\n          : \"🥶 Very cold — layer up with thermal wear and a jacket 🧤🧥\";\n      } else {\n        tip = \"🧊 Freezing! Heavy winter gear is essential — coat, gloves, scarf, the works 🧥🧤🧣\";\n      }\n\n      this.setState({\n        lat,\n        lon,\n        city: data.name,\n        country: data.sys.country,\n        temperatureC: Math.round(temp),\n        temperatureF: Math.round(temp * 1.8 + 32),\n        humidity: data.main.humidity,\n        main: condition,\n        icon,\n        clothingTip: tip,\n        weeklyForecast: dailyAverages\n      });\n    } catch (error) {\n      console.error(\"Weather fetch failed:\", error.message);\n    }\n  };\n\n  handleBackgroundClick = (e) => {\n    if (e.target.classList.contains(\"city\")) {\n      console.log(\"Background clicked. You can trigger background change here.\");\n      // You can add logic here if needed to change background dynamically\n    }\n  };\n\n  renderForecastCard = () => {\n    return (\n      <div className=\"forecast-card\">\n        {this.state.weeklyForecast.map((day, index) => {\n          const date = new Date(day.date);\n          const options = { weekday: \"short\" };\n          return (\n            <div key={index} className=\"forecast-day\">\n              <span>{date.toLocaleDateString(\"en-US\", options)}</span>\n              <span>{Math.round(day.avgTemp)}°C</span>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  render() {\n    const { temperatureC, main } = this.state;\n    const backgroundStyle = main\n      ? {\n          backgroundImage: `url(${getBackgroundImage(main)})`,\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundPosition: \"center\",\n          transition: \"background-image 0.5s ease-in-out\"\n        }\n      : {};\n\n    if (temperatureC !== undefined) {\n      return (\n        <React.Fragment>\n          <div className=\"city\" style={backgroundStyle} onClick={this.handleBackgroundClick}>\n            <div className=\"title\">\n              <h2>{this.state.city}, {getCountryName(this.state.country)}</h2>\n            </div>\n\n            {/* Forecast Card + Map */}\n            <div style={{ margin: \"0 auto\", marginBottom: \"20px\" }}>\n              {this.renderForecastCard()}\n              <WeatherMap lat={this.state.lat} lon={this.state.lon} city={this.state.city} />\n            </div>\n\n            <div className=\"mb-icon\">\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>{temperatureC}°<span>C</span></p>\n              </div>\n            </div>\n\n            <div className=\"clothing-tip\">\n              <p>{this.state.clothingTip}</p>\n            </div>\n          </div>\n\n          {/* Forecast Side Panel */}\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} alt=\"loading\" style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location will be displayed on the App <br />& used for real-time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","export function getBackgroundImage(condition) {\n  const conditionMap = {\n    Clear: \"clear.jpg\",\n    Clouds: \"clouds.jpg\",\n    Rain: \"rain.jpg\",\n    Thunderstorm: \"thunderstorm.jpg\",\n    Snow: \"snow.jpg\",\n    Drizzle: \"drizzle.jpg\",\n    Mist: \"mist.jpg\",\n    Haze: \"haze.jpg\",\n    Fog: \"fog.jpg\",\n    Smoke: \"smoke.jpg\",\n    Dust: \"dust.jpg\",\n    Sand: \"sand.jpg\",\n    Ash: \"ash.jpg\",\n    Squall: \"squall.jpg\",\n    Tornado: \"tornado.jpg\",\n  };\n\n  const filename = conditionMap[condition] || \"default.jpg\";\n  return `/images/weather-bg/${filename}`;\n}\n","import React, { useState, useEffect } from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  const [bgIndex, setBgIndex] = useState(1);\n\n  // On page load, choose a random background between 1–10\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * 10) + 1;\n    setBgIndex(randomIndex);\n  }, []);\n\n  // Function to change background on click\n  const handleBackgroundClick = () => {\n    setBgIndex((prevIndex) => (prevIndex % 10) + 1); // Cycles from 1 to 10\n  };\n\n  return (\n    <div onClick={handleBackgroundClick}>\n      {/* Background layer */}\n      <div\n        className=\"background-wrapper\"\n        style={{\n          backgroundImage: `url(./images/weather-bg/background${bgIndex}.jpg)`\n        }}\n      />\n\n      {/* Main content */}\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n\n      {/* Footer */}\n      <footer className=\"footer-info\">\n        <span className=\"quote\">\"Weather your day smartly – with Atmosense ⛅\"</span>\n        <span className=\"divider\">|</span>\n        <span className=\"author\">\n          Designed by{\" \"}\n          <a\n            href=\"https://github.com/Aanjaneya24\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Aanjaneya Pandey\n          </a>{\" \"}\n          | Powered by{\" \"}\n          <a\n            href=\"https://openweathermap.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            OpenWeather\n          </a>\n        </span>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'leaflet/dist/leaflet.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// Visit https://api.openweathermap.org & then signup to get our API keys for free\nmodule.exports = {\n  key: \"64efb07bee906ab846ee23a448f62b06\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n"],"sourceRoot":""}